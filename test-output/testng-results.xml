<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="18" passed="15" failed="3" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-08-13T11:28:09 IST" name="Hotel Room API Suite" finished-at="2025-08-13T11:28:21 IST" duration-ms="11023">
    <groups>
    </groups>
    <test started-at="2025-08-13T11:28:09 IST" name="RoomService Tests" finished-at="2025-08-13T11:28:21 IST" duration-ms="11023">
      <class name="tests.UpdateRoomPriceTest">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.UpdateRoomPriceTest@2b71e916]" started-at="2025-08-13T11:28:19 IST" name="beforeMethod" finished-at="2025-08-13T11:28:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.UpdateRoomPriceTest.testUpdateRoomPrice()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testUpdateRoomPrice()[pri:0, instance:tests.UpdateRoomPriceTest@2b71e916]" started-at="2025-08-13T11:28:19 IST" name="testUpdateRoomPrice" finished-at="2025-08-13T11:28:19 IST" duration-ms="149" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateRoomPrice -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.UpdateRoomPriceTest@2b71e916]" started-at="2025-08-13T11:28:19 IST" name="afterMethod" finished-at="2025-08-13T11:28:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdateRoomPrice status=SUCCESS method=UpdateRoomPriceTest.testUpdateRoomPrice()[pri:0, instance:tests.UpdateRoomPriceTest@2b71e916] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="testUpdateRoomPricesFromJson()[pri:0, instance:tests.UpdateRoomPriceTest@2b71e916]" started-at="2025-08-13T11:28:19 IST" name="testUpdateRoomPricesFromJson" finished-at="2025-08-13T11:28:20 IST" duration-ms="625" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateRoomPricesFromJson -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.UpdateRoomPriceTest@2b71e916]" started-at="2025-08-13T11:28:19 IST" name="beforeMethod" finished-at="2025-08-13T11:28:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.UpdateRoomPriceTest.testUpdateRoomPricesFromJson()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.UpdateRoomPriceTest@2b71e916]" started-at="2025-08-13T11:28:20 IST" name="afterMethod" finished-at="2025-08-13T11:28:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testUpdateRoomPricesFromJson status=SUCCESS method=UpdateRoomPriceTest.testUpdateRoomPricesFromJson()[pri:0, instance:tests.UpdateRoomPriceTest@2b71e916] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.UpdateRoomPriceTest -->
      <class name="tests.DeleteRoomTest">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.DeleteRoomTest@36fc695d]" started-at="2025-08-13T11:28:20 IST" name="beforeMethod" finished-at="2025-08-13T11:28:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.DeleteRoomTest.testDeleteRoomById()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testDeleteRoomById()[pri:0, instance:tests.DeleteRoomTest@36fc695d]" started-at="2025-08-13T11:28:20 IST" name="testDeleteRoomById" finished-at="2025-08-13T11:28:20 IST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteRoomById -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.DeleteRoomTest@36fc695d]" started-at="2025-08-13T11:28:20 IST" name="afterMethod" finished-at="2025-08-13T11:28:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeleteRoomById status=SUCCESS method=DeleteRoomTest.testDeleteRoomById()[pri:0, instance:tests.DeleteRoomTest@36fc695d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.DeleteRoomTest@36fc695d]" started-at="2025-08-13T11:28:20 IST" name="beforeMethod" finished-at="2025-08-13T11:28:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.DeleteRoomTest.testDeleteRoomsFromJson()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testDeleteRoomsFromJson()[pri:0, instance:tests.DeleteRoomTest@36fc695d]" started-at="2025-08-13T11:28:20 IST" name="testDeleteRoomsFromJson" finished-at="2025-08-13T11:28:21 IST" duration-ms="602" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteRoomsFromJson -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.DeleteRoomTest@36fc695d]" started-at="2025-08-13T11:28:21 IST" name="afterMethod" finished-at="2025-08-13T11:28:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDeleteRoomsFromJson status=SUCCESS method=DeleteRoomTest.testDeleteRoomsFromJson()[pri:0, instance:tests.DeleteRoomTest@36fc695d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.DeleteRoomTest -->
      <class name="tests.ViewRoomByIdTest">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:15 IST" name="beforeMethod" finished-at="2025-08-13T11:28:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByIdTest.testViewRoomById()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testViewRoomById()[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:15 IST" name="testViewRoomById" finished-at="2025-08-13T11:28:15 IST" duration-ms="243" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomById -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:15 IST" name="afterMethod" finished-at="2025-08-13T11:28:15 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomById status=SUCCESS method=ViewRoomByIdTest.testViewRoomById()[pri:0, instance:tests.ViewRoomByIdTest@51399530] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="beforeMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByIdTest.testViewRoomByIdFromJson(int)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testViewRoomByIdFromJson(int)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="testViewRoomByIdFromJson" data-provider="roomData" finished-at="2025-08-13T11:28:16 IST" duration-ms="223" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[101]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomByIdFromJson -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="afterMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomByIdFromJson status=SUCCESS method=ViewRoomByIdTest.testViewRoomByIdFromJson(int)[pri:0, instance:tests.ViewRoomByIdTest@51399530] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="beforeMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByIdTest.testViewRoomByIdFromJson(int)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testViewRoomByIdFromJson(int)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="testViewRoomByIdFromJson" data-provider="roomData" finished-at="2025-08-13T11:28:16 IST" duration-ms="213" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[301]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomByIdFromJson -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="afterMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomByIdFromJson status=SUCCESS method=ViewRoomByIdTest.testViewRoomByIdFromJson(int)[pri:0, instance:tests.ViewRoomByIdTest@51399530] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="testViewRoomByIdFromJson(int)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="testViewRoomByIdFromJson" data-provider="roomData" finished-at="2025-08-13T11:28:16 IST" duration-ms="190" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[701]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomByIdFromJson -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="beforeMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByIdTest.testViewRoomByIdFromJson(int)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="afterMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomByIdFromJson status=SUCCESS method=ViewRoomByIdTest.testViewRoomByIdFromJson(int)[pri:0, instance:tests.ViewRoomByIdTest@51399530] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="testViewRoomByIdFromJson(int)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="testViewRoomByIdFromJson" data-provider="roomData" finished-at="2025-08-13T11:28:16 IST" duration-ms="200" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[702]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Expected response body to be verified as JSON, HTML or XML but no content-type was defined in the response.
Try registering a default parser using:
   RestAssured.defaultParser(<parser type>);
Content was:

]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Expected response body to be verified as JSON, HTML or XML but no content-type was defined in the response.
Try registering a default parser using:
   RestAssured.defaultParser(<parser type>);
Content was:


at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:59)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.assertion.StreamVerifier.newAssertion(StreamVerifier.groovy:43)
at io.restassured.assertion.StreamVerifier$newAssertion.call(Unknown Source)
at io.restassured.assertion.BodyMatcher.validate(BodyMatcher.groovy:85)
at io.restassured.assertion.BodyMatcher$validate$0.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.assertion.BodyMatcher$validate$0.call(Unknown Source)
at io.restassured.assertion.BodyMatcherGroup$_validate_closure2.doCall(BodyMatcherGroup.groovy:47)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:274)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)
at groovy.lang.Closure.call(Closure.java:412)
at groovy.lang.Closure.call(Closure.java:428)
at org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3602)
at org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3587)
at org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3687)
at org.codehaus.groovy.runtime.dgm$101.invoke(Unknown Source)
at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:247)
at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:56)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:139)
at io.restassured.assertion.BodyMatcherGroup.validate(BodyMatcherGroup.groovy:47)
at io.restassured.assertion.BodyMatcherGroup$validate$3.call(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)
at io.restassured.assertion.BodyMatcherGroup$validate$3.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:486)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:684)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:262)
at io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:109)
at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)
at io.restassured.internal.ValidatableResponseImpl.super$2$body(ValidatableResponseImpl.groovy)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy:298)
at io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy)
at tests.ViewRoomByIdTest.testViewRoomByIdFromJson(ViewRoomByIdTest.java:50)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomByIdFromJson -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="beforeMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByIdTest.testViewRoomByIdFromJson(int)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByIdTest@51399530]" started-at="2025-08-13T11:28:16 IST" name="afterMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomByIdFromJson status=FAILURE method=ViewRoomByIdTest.testViewRoomByIdFromJson(int)[pri:0, instance:tests.ViewRoomByIdTest@51399530] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.ViewRoomByIdTest -->
      <class name="tests.ViewRoomByTypeTest">
        <test-method signature="testViewRoomByType()[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:16 IST" name="testViewRoomByType" finished-at="2025-08-13T11:28:17 IST" duration-ms="209" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomByType -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:16 IST" name="beforeMethod" finished-at="2025-08-13T11:28:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByTypeTest.testViewRoomByType()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="afterMethod" finished-at="2025-08-13T11:28:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomByType status=SUCCESS method=ViewRoomByTypeTest.testViewRoomByType()[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="beforeMethod" finished-at="2025-08-13T11:28:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByTypeTest.testViewRoomsByTypeFromJson(java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testViewRoomsByTypeFromJson(java.lang.String)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="testViewRoomsByTypeFromJson" data-provider="roomTypeData" finished-at="2025-08-13T11:28:17 IST" duration-ms="207" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[SINGLE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomsByTypeFromJson -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="afterMethod" finished-at="2025-08-13T11:28:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomsByTypeFromJson status=SUCCESS method=ViewRoomByTypeTest.testViewRoomsByTypeFromJson(java.lang.String)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="beforeMethod" finished-at="2025-08-13T11:28:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByTypeTest.testViewRoomsByTypeFromJson(java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testViewRoomsByTypeFromJson(java.lang.String)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="testViewRoomsByTypeFromJson" data-provider="roomTypeData" finished-at="2025-08-13T11:28:17 IST" duration-ms="180" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DELUXE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomsByTypeFromJson -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="afterMethod" finished-at="2025-08-13T11:28:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomsByTypeFromJson status=SUCCESS method=ViewRoomByTypeTest.testViewRoomsByTypeFromJson(java.lang.String)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="testViewRoomsByTypeFromJson(java.lang.String)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="testViewRoomsByTypeFromJson" data-provider="roomTypeData" finished-at="2025-08-13T11:28:17 IST" duration-ms="202" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DOUBLE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomsByTypeFromJson -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="beforeMethod" finished-at="2025-08-13T11:28:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByTypeTest.testViewRoomsByTypeFromJson(java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="afterMethod" finished-at="2025-08-13T11:28:17 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomsByTypeFromJson status=SUCCESS method=ViewRoomByTypeTest.testViewRoomsByTypeFromJson(java.lang.String)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="beforeMethod" finished-at="2025-08-13T11:28:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomByTypeTest.testViewRoomsByTypeFromJson(java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testViewRoomsByTypeFromJson(java.lang.String)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:17 IST" name="testViewRoomsByTypeFromJson" data-provider="roomTypeData" finished-at="2025-08-13T11:28:18 IST" duration-ms="208" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[abcd]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
JSON path size() doesn't match.
Expected: a value greater than <0>
  Actual: <0>
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
JSON path size() doesn't match.
Expected: a value greater than <0>
  Actual: <0>

at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:105)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:499)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:684)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:262)
at io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51)
at io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:109)
at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)
at io.restassured.internal.ValidatableResponseImpl.super$2$body(ValidatableResponseImpl.groovy)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy:298)
at io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy)
at tests.ViewRoomByTypeTest.testViewRoomsByTypeFromJson(ViewRoomByTypeTest.java:56)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomsByTypeFromJson -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799]" started-at="2025-08-13T11:28:18 IST" name="afterMethod" finished-at="2025-08-13T11:28:18 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomsByTypeFromJson status=FAILURE method=ViewRoomByTypeTest.testViewRoomsByTypeFromJson(java.lang.String)[pri:0, instance:tests.ViewRoomByTypeTest@6b2ea799] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.ViewRoomByTypeTest -->
      <class name="tests.AuthTests">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:tests.AuthTests@639c2c1d]" started-at="2025-08-13T11:28:08 IST" name="beforeSuite" finished-at="2025-08-13T11:28:09 IST" duration-ms="1736" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AuthTests@639c2c1d]" started-at="2025-08-13T11:28:10 IST" name="beforeMethod" finished-at="2025-08-13T11:28:10 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AuthTests.testGetAuthAndToken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetAuthAndToken()[pri:0, instance:tests.AuthTests@639c2c1d]" started-at="2025-08-13T11:28:10 IST" name="testGetAuthAndToken" finished-at="2025-08-13T11:28:14 IST" duration-ms="4803" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAuthAndToken -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AuthTests@639c2c1d]" started-at="2025-08-13T11:28:14 IST" name="afterMethod" finished-at="2025-08-13T11:28:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testGetAuthAndToken status=SUCCESS method=AuthTests.testGetAuthAndToken()[pri:0, instance:tests.AuthTests@639c2c1d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:tests.AuthTests@639c2c1d]" started-at="2025-08-13T11:28:21 IST" name="afterSuite" finished-at="2025-08-13T11:28:21 IST" duration-ms="743" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- tests.AuthTests -->
      <class name="tests.ViewRoomListTest">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.ViewRoomListTest@6771beb3]" started-at="2025-08-13T11:28:14 IST" name="beforeMethod" finished-at="2025-08-13T11:28:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.ViewRoomListTest.testViewRoomList()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testViewRoomList()[pri:0, instance:tests.ViewRoomListTest@6771beb3]" started-at="2025-08-13T11:28:14 IST" name="testViewRoomList" finished-at="2025-08-13T11:28:15 IST" duration-ms="629" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testViewRoomList -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.ViewRoomListTest@6771beb3]" started-at="2025-08-13T11:28:15 IST" name="afterMethod" finished-at="2025-08-13T11:28:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testViewRoomList status=SUCCESS method=ViewRoomListTest.testViewRoomList()[pri:0, instance:tests.ViewRoomListTest@6771beb3] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.ViewRoomListTest -->
      <class name="tests.AddRoomTest">
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AddRoomTest@411f53a0]" started-at="2025-08-13T11:28:18 IST" name="beforeMethod" finished-at="2025-08-13T11:28:18 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AddRoomTest.testAddRoom()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testAddRoom()[pri:0, instance:tests.AddRoomTest@411f53a0]" started-at="2025-08-13T11:28:18 IST" name="testAddRoom" finished-at="2025-08-13T11:28:18 IST" duration-ms="337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddRoom -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AddRoomTest@411f53a0]" started-at="2025-08-13T11:28:18 IST" name="afterMethod" finished-at="2025-08-13T11:28:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testAddRoom status=SUCCESS method=AddRoomTest.testAddRoom()[pri:0, instance:tests.AddRoomTest@411f53a0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:tests.AddRoomTest@411f53a0]" started-at="2025-08-13T11:28:18 IST" name="beforeMethod" finished-at="2025-08-13T11:28:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.AddRoomTest.testAddRoomsFromJson()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testAddRoomsFromJson()[pri:0, instance:tests.AddRoomTest@411f53a0]" started-at="2025-08-13T11:28:18 IST" name="testAddRoomsFromJson" finished-at="2025-08-13T11:28:19 IST" duration-ms="1093" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <200> but was <400>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <200> but was <400>.

at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:72)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:105)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:499)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:684)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:127)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:135)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at tests.AddRoomTest.testAddRoomsFromJson(AddRoomTest.java:49)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddRoomsFromJson -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.AddRoomTest@411f53a0]" started-at="2025-08-13T11:28:19 IST" name="afterMethod" finished-at="2025-08-13T11:28:19 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testAddRoomsFromJson status=FAILURE method=AddRoomTest.testAddRoomsFromJson()[pri:0, instance:tests.AddRoomTest@411f53a0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- tests.AddRoomTest -->
    </test> <!-- RoomService Tests -->
  </suite> <!-- Hotel Room API Suite -->
</testng-results>
